#!/bin/bash

# Maintain 'n' number of snapshots at any given time.
# Complimentary to backup
# https://github.com/afreeorange/rsync-timemachine

# Nikhil Anand <anand.nikhil@gmail.com>
# Mon Oct 25 09:22:28 CDT 2010

# General purpose mailer subroutine.
mailreport() {
  EMAILADDRESS=$1
  SUBJECT=$2
  MESSAGEFILE=$3

  mail -s "$SUBJECT" "$EMAILADDRESS" <"$MESSAGEFILE"
}

# Emulate the 'seq' command for OS X. This _could_ be done with 'jot', but I'm le lazy.
_seq() {
  counter="$1"
  max="$2"

  if [ "$#" -eq 2 ]; then
    step=1
  else
    step=$3
  fi

  while [[ $counter -le $max ]]; do
    echo "$counter"
    counter=$((counter + step))
  done

  return 0
}

# Send nicely formatted backup params to log
send_log_param() {
  printf "%-20s : %s\n" "$1" "$2"
}

# Show script usage information
usage() {
  echo -e "
$(basename "$0") [OPTIONS]

Options
 -d   backup directory containing snapshots
 -n   number of snapshots to keep (default 10)
 -r   remove old rotation logs (default)
 -m   email address to mail reports to
 -q   be quiet and show no output
"
  exit
}

# Show usage if no params
[[ $# -eq 0 ]] && usage

# Start collecting rotation params
BEQUIET=false
EMAILADDRESS=""
while getopts "d:n:rm:q" opt; do
  case $opt in
  d)
    SNAPSHOT_FOLDER=$OPTARG
    ;;
  n)
    NUMBER_TO_KEEP=$OPTARG
    ;;
  r)
    DELETE_ROTATION_LOGS=true
    ;;
  m)
    EMAILADDRESS=$OPTARG
    ;;
  q)
    BEQUIET=true
    ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    exit 1
    ;;
  :)
    echo "Option -$OPTARG requires an argument." >&2
    exit 1
    ;;
  esac
done

# Log the start time
TIME_STARTED=$(date "+%Y-%m-%dT%H.%M.%S")

# Set the internal file separator since we're using arrays
IFS='
'

# Define log files, process lock, etc
ROTATELOG="/tmp/rotatelog.$TIME_STARTED"
DELETELOG=$(mktemp "$ROTATELOG.XXXXXX")
LOCKFILE="/tmp/rotatelock"
SOURCESERVER=$(hostname -s)
CATALOG="$SNAPSHOT_FOLDER/logs/catalog"

# Start logging
send_log_param "Started" "$TIME_STARTED" >>"$ROTATELOG"
send_log_param "Backup path" "$SNAPSHOT_FOLDER" >>"$ROTATELOG"

###### BEGIN SANITY CHECK #####

# Show usage if snapshot folder's not specified
if [[ -z $SNAPSHOT_FOLDER ]]; then
  usage
fi

# Check for the existence of the backup folder
if [[ ! -d $SNAPSHOT_FOLDER ]]; then
  echo -e "\nCould not find source $SNAPSHOT_FOLDER" >>"$ROTATELOG"
  if [[ -n $EMAILADDRESS ]]; then
    mailreport "$EMAILADDRESS" "eror - $SOURCESERVER" "$ROTATELOG"
  elif [[ -n $BEQUIET ]]; then
    more "$ROTATELOG"
  fi
  exit 1
fi

# Check the number of snapshots specified
if [[ -z $NUMBER_TO_KEEP ]]; then
  NUMBER_TO_KEEP=10
fi
case "$NUMBER_TO_KEEP" in
*[!0-9]*) NUMBER_TO_KEEP=10 ;;
0) NUMBER_TO_KEEP=10 ;;
esac

# Generate a list of ISO timestamps. Will be used to find and delete snapshots and log files
# shellcheck disable=SC2207
LIST_OF_TIMESTAMPS=($(find "$SNAPSHOT_FOLDER" -maxdepth 1 -type d -exec basename {} \; | sort | grep '\<[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}T[0-9]\{2\}\.[0-9]\{2\}\.[0-9]\{2\}\>'))
NUMBER_OF_SNAPSHOTS=${#LIST_OF_TIMESTAMPS[@]}

{
  send_log_param "Snapshots" "$NUMBER_OF_SNAPSHOTS"
  send_log_param "Keep" "$NUMBER_TO_KEEP"
} >>"$ROTATELOG"

# Check if any backup entities exist in source dir
if [[ $NUMBER_OF_SNAPSHOTS -eq "0" ]]; then
  echo -e "\nNo backup entities found in the specified directory ($SNAPSHOT_FOLDER)" >>"$ROTATELOG"
  exit 1
else
  # More snapshots than existing directories?
  if [[ $NUMBER_TO_KEEP -gt $NUMBER_OF_SNAPSHOTS ]]; then
    echo -e "\nYou wanted to keep $NUMBER_TO_KEEP snapshots out of $NUMBER_OF_SNAPSHOTS. Kinda not possible." >>"$ROTATELOG"
    exit 1
  elif [[ $NUMBER_TO_KEEP -eq $NUMBER_OF_SNAPSHOTS ]]; then
    echo -e "\nYou want to delete $NUMBER_TO_KEEP out of $NUMBER_OF_SNAPSHOTS snapshots? Why not just remove the backup directory and be done? Why mess with me?" >>"$ROTATELOG"
    exit 1
  fi
fi

# Check platform and set the seq command
SEQUENCE=_seq
if [[ "$(uname)" == "Linux" ]]; then
  SEQUENCE=$(which seq)
fi

# Check if a competing backup process exists
if [[ -e "$LOCKFILE" ]]; then
  echo -e "\nAnother rotation job exists for the same client. Aborting." >>"$ROTATELOG"

  if [[ "$EMAILADDRESS" != "" ]]; then
    mailreport "$EMAILADDRESS" "eror - $SOURCESERVER" "$ROTATELOG"
  elif [[ "$BEQUIET" == "false" ]]; then
    more "$ROTATELOG"
  fi

  exit 1
else
  touch $LOCKFILE
fi

###### END SANITY CHECK ######

# Seems like everything is okay; start deleting. Create a temporary deletion log
echo -e "\n---- Removal Log ----\n" >>"$DELETELOG"
CLEAN_TO_INDEX=$((NUMBER_OF_SNAPSHOTS - NUMBER_TO_KEEP - 1))

for i in $($SEQUENCE 0 $CLEAN_TO_INDEX); do
  # shellcheck disable=SC2129,SC2115
  rm -rf "$SNAPSHOT_FOLDER"/"${LIST_OF_TIMESTAMPS[i]}" 2>>"$DELETELOG"
  echo "Removed" "$SNAPSHOT_FOLDER/${LIST_OF_TIMESTAMPS[i]}" >>"$DELETELOG"

  rm -rf "$SNAPSHOT_FOLDER/logs/backuplog.${LIST_OF_TIMESTAMPS[i]}.gz" 2>>"$DELETELOG"
  echo "       " "$SNAPSHOT_FOLDER/logs/${LIST_OF_TIMESTAMPS[i]}.full.gz" >>"$DELETELOG"

  rm -rf "$SNAPSHOT_FOLDER/logs/backuplog.${LIST_OF_TIMESTAMPS[i]}.full.gz" 2>>"$DELETELOG"
  echo "       " "$SNAPSHOT_FOLDER/logs/${LIST_OF_TIMESTAMPS[i]}.gz" >>"$DELETELOG"
done

# Remove older rotation logs
if [[ -n $DELETE_ROTATION_LOGS ]]; then
  rm -rf "$SNAPSHOT_FOLDER"/logs/rotatelog* 2>>"$DELETELOG"
fi

# Log finish time
TIME_FINISHED=$(date "+%Y-%m-%dT%H.%M.%S")
send_log_param "Finished" "$TIME_FINISHED" >>"$ROTATELOG"

# Finish the rotation log
cat "$DELETELOG" >>"$ROTATELOG"

# Email if specified
if [[ "$EMAILADDRESS" != "" ]]; then
  mailreport "$EMAILADDRESS" "$EMAILSUBJECT" "$ROTATELOG"
elif [[ "$BEQUIET" == "false" ]]; then
  cat "$ROTATELOG"
fi

# Clean up
rm -f "$DELETELOG"
mv "$ROTATELOG" "$SNAPSHOT_FOLDER/logs/rotatelog.$TIME_STARTED"
gzip -9 "$SNAPSHOT_FOLDER/logs/rotatelog.$TIME_STARTED"

# Finish the catalog
printf "%-22s%-22s%-22s(%d,%d)\n" "prune" "$TIME_STARTED" "$TIME_FINISHED" "$NUMBER_OF_SNAPSHOTS" "$NUMBER_TO_KEEP" >>"$CATALOG"

# Remove lock
rm $LOCKFILE
exit 0
